-- Piotr Nosek
-- Deklaracja z gramatyka jezyka 
-- JPP 2017/2018
-- wzorowane na gramatyce jezyka C - https://github.com/BNFC/bnfc/blob/master/examples/C/C.cf

entrypoints Program, Stm, Exp ;

Progr.  Program ::= [External_declaration] ;

(:[]).    [External_declaration] ::= External_declaration;
(:).      [External_declaration] ::= External_declaration [External_declaration];

-- DECLARATIONS

Afunc.        External_declaration ::= Function_def;
Global.       External_declaration ::= Dec;

DecBase.      Dec_base ::= Type_specifier Ident;
Declaration.  Dec ::= Dec_base ";";

FuncDef.      Function_def ::= "function" Dec_base "(" [Dec_base] ")" Function_body;
FuncBody.  	  Function_body ::= "{" [Dec] [Function_def] [Stm] "return" Expression_stm "}" ;

terminator Dec "" ;
separator Dec_base ",";
separator Function_def "";

-- DATA TYPES

Tbool.        Type_specifier ::= "bool";
Tint.         Type_specifier ::= "int";
Tvoid.        Type_specifier ::= "void";

Tarray.       Type_specifier ::= Type_specifier "[]" ;
Ttuple.       Type_specifier ::= "(" [Type_specifier] ")";
Tdict.        Type_specifier ::= Type_specifier "<" Type_specifier ">";

separator nonempty Type_specifier ",";

-- STATEMENTS
CompS.    Stm ::= Compound_stm ;
ExprS.    Stm ::= Expression_stm ;
SelS.     Stm ::= Selection_stm ;
IterS.    Stm ::= Iter_stm ;
PrintS.   Stm ::= Print_stmt ;

SCompOne.  Compound_stm ::= "{" [Dec] [Stm] "}" ;

SExprOne.   Expression_stm ::= ";" ;
SExprTwo.   Expression_stm ::= Exp ";" ;

SselOne.    Selection_stm ::= "if" "(" Exp ")" Stm ;
SselTwo.    Selection_stm ::= "if" "(" Exp ")" Stm "else" Stm ;

SiterOne.   Iter_stm ::= "while" "(" Exp ")" Stm;
SiterTwo.   Iter_stm ::= "for" "(" Exp2 "to" Exp11 ")" Stm ;

SPrintOne.  Print_stmt ::= "puts" Exp ";" ;

terminator Stm "" ;

-- EXPRESSIONS

Ecomma.      Exp  ::= Exp "," Exp2;
Eassign.     Exp2 ::= Exp9 Assignment_op Exp2;
Elor.        Exp3 ::= Exp4 "||" Exp4;
Eland.       Exp4 ::= Exp4 "&&" Exp5;
Eeq.         Exp5 ::= Exp5 "==" Exp6;
Eneq.        Exp5 ::= Exp5 "!=" Exp6;
Elthen.      Exp6 ::= Exp6 "<" Exp7;
Egrthen.     Exp6 ::= Exp6 ">" Exp7;
Ele.         Exp6 ::= Exp6 "<=" Exp7;
Ege.         Exp6 ::= Exp6 ">=" Exp7;
Eplus.       Exp7 ::= Exp7 "+" Exp8;
Eminus.      Exp7 ::= Exp7 "-" Exp8;
Etimes.      Exp8 ::= Exp8 "*" Exp9;
Ediv.        Exp8 ::= Exp8 "/" Exp9;
Emod.        Exp8 ::= Exp8 "%" Exp9;
Epreinc.     Exp9 ::= "++" Exp9;
Epredec.     Exp9 ::= "--" Exp9;
Epreop.      Exp9 ::= Unary_operator Exp8;
Earray.      Exp10 ::= Exp10 "[" Exp "]" ;
Efunk.       Exp10 ::= Ident "(" ")";
Efunkpar.    Exp10 ::= Ident "(" [Exp2] ")";
Epostinc.    Exp10 ::= Exp10 "++";
Epostdec.    Exp10 ::= Exp10 "--";
Etuple.      Exp11 ::= "(" [Exp2] ")";
Evar.        Exp12 ::= Ident;
Econst.      Exp12 ::= Constant;

Eint.        Constant ::= Integer;
Etrue.       Constant ::= "true";
Efalse.      Constant ::= "false";

coercions Exp 12;
separator nonempty Exp2 ",";

Plus.         Unary_operator ::= "+" ;
Negative.     Unary_operator ::= "-" ;
Logicalneg.   Unary_operator ::= "!" ;

Assign.       Assignment_op ::= "=" ;
AssignAdd.    Assignment_op ::= "+=" ;
AssignSub.    Assignment_op ::= "-=" ;
AssignMul.    Assignment_op ::= "*=" ;
AssignDiv.    Assignment_op ::= "/=" ;
AssignMod.    Assignment_op ::= "%=" ;

-- COMMENTS

comment "#";
comment "/*" "*/";
