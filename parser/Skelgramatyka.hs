module Skelgramatyka where

-- Haskell module generated by the BNF converter

import Absgramatyka
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Progr external_declarations  -> failure x


transExternal_declaration :: External_declaration -> Result
transExternal_declaration x = case x of
  Afunc function_def  -> failure x
  Global dec  -> failure x


transDec_base :: Dec_base -> Result
transDec_base x = case x of
  DecBase type_specifier id  -> failure x


transDec :: Dec -> Result
transDec x = case x of
  Declaration dec_base  -> failure x


transFunction_def :: Function_def -> Result
transFunction_def x = case x of
  FuncDef dec_base dec_bases function_body  -> failure x


transFunction_body :: Function_body -> Result
transFunction_body x = case x of
  FuncBody decs function_defs stms expression_stm  -> failure x


transType_specifier :: Type_specifier -> Result
transType_specifier x = case x of
  Tbool  -> failure x
  Tint  -> failure x
  Tvoid  -> failure x
  Tarray type_specifier  -> failure x
  Ttuple type_specifiers  -> failure x
  Tdict type_specifier0 type_specifier  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  CompS compound_stm  -> failure x
  ExprS expression_stm  -> failure x
  SelS selection_stm  -> failure x
  IterS iter_stm  -> failure x
  PrintS print_stmt  -> failure x


transCompound_stm :: Compound_stm -> Result
transCompound_stm x = case x of
  SCompOne decs stms  -> failure x


transExpression_stm :: Expression_stm -> Result
transExpression_stm x = case x of
  SExprOne  -> failure x
  SExprTwo exp  -> failure x


transSelection_stm :: Selection_stm -> Result
transSelection_stm x = case x of
  SselOne exp stm  -> failure x
  SselTwo exp stm0 stm  -> failure x


transIter_stm :: Iter_stm -> Result
transIter_stm x = case x of
  SiterOne exp stm  -> failure x
  SiterTwo exp0 exp stm  -> failure x


transPrint_stmt :: Print_stmt -> Result
transPrint_stmt x = case x of
  SPrintOne exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Ecomma exp0 exp  -> failure x
  Eassign exp0 assignment_op exp  -> failure x
  Elor exp0 exp  -> failure x
  Eland exp0 exp  -> failure x
  Eeq exp0 exp  -> failure x
  Eneq exp0 exp  -> failure x
  Elthen exp0 exp  -> failure x
  Egrthen exp0 exp  -> failure x
  Ele exp0 exp  -> failure x
  Ege exp0 exp  -> failure x
  Eplus exp0 exp  -> failure x
  Eminus exp0 exp  -> failure x
  Etimes exp0 exp  -> failure x
  Ediv exp0 exp  -> failure x
  Emod exp0 exp  -> failure x
  Epreinc exp  -> failure x
  Epredec exp  -> failure x
  Epreop unary_operator exp  -> failure x
  Earray exp0 exp  -> failure x
  Efunk id  -> failure x
  Efunkpar id exps  -> failure x
  Epostinc exp  -> failure x
  Epostdec exp  -> failure x
  Etuple exps  -> failure x
  Evar id  -> failure x
  Econst constant  -> failure x


transConstant :: Constant -> Result
transConstant x = case x of
  Eint n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x


transUnary_operator :: Unary_operator -> Result
transUnary_operator x = case x of
  Plus  -> failure x
  Negative  -> failure x
  Logicalneg  -> failure x


transAssignment_op :: Assignment_op -> Result
transAssignment_op x = case x of
  Assign  -> failure x
  AssignAdd  -> failure x
  AssignSub  -> failure x
  AssignMul  -> failure x
  AssignDiv  -> failure x



