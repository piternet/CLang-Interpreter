{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Printgramatyka where

-- pretty-printer generated by the BNF converter

import Absgramatyka
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
   Progr external_declarations -> prPrec i 0 (concatD [prt 0 external_declarations])


instance Print External_declaration where
  prt i e = case e of
   Afunc function_def -> prPrec i 0 (concatD [prt 0 function_def])
   Global dec -> prPrec i 0 (concatD [prt 0 dec])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Dec_base where
  prt i e = case e of
   DecBase type_specifier id -> prPrec i 0 (concatD [prt 0 type_specifier , prt 0 id])

  prtList es = case es of
   [] -> (concatD [])
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Dec where
  prt i e = case e of
   Declaration dec_base -> prPrec i 0 (concatD [prt 0 dec_base , doc (showString ";")])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Function_def where
  prt i e = case e of
   FuncDef dec_base dec_bases function_body -> prPrec i 0 (concatD [doc (showString "function") , prt 0 dec_base , doc (showString "(") , prt 0 dec_bases , doc (showString ")") , prt 0 function_body])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Function_body where
  prt i e = case e of
   FuncBody decs function_defs stms expression_stm -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decs , prt 0 function_defs , prt 0 stms , doc (showString "return") , prt 0 expression_stm , doc (showString "}")])


instance Print Type_specifier where
  prt i e = case e of
   Tbool  -> prPrec i 0 (concatD [doc (showString "bool")])
   Tint  -> prPrec i 0 (concatD [doc (showString "int")])
   Tvoid  -> prPrec i 0 (concatD [doc (showString "void")])
   Tarray type_specifier -> prPrec i 0 (concatD [prt 0 type_specifier , doc (showString "[]")])
   Ttuple type_specifiers -> prPrec i 0 (concatD [doc (showString "(") , prt 0 type_specifiers , doc (showString ")")])
   Tdict type_specifier0 type_specifier -> prPrec i 0 (concatD [prt 0 type_specifier0 , doc (showString "<") , prt 0 type_specifier , doc (showString ">")])

  prtList es = case es of
   [x] -> (concatD [prt 0 x])
   x:xs -> (concatD [prt 0 x , doc (showString ",") , prt 0 xs])

instance Print Stm where
  prt i e = case e of
   CompS compound_stm -> prPrec i 0 (concatD [prt 0 compound_stm])
   ExprS expression_stm -> prPrec i 0 (concatD [prt 0 expression_stm])
   SelS selection_stm -> prPrec i 0 (concatD [prt 0 selection_stm])
   IterS iter_stm -> prPrec i 0 (concatD [prt 0 iter_stm])
   PrintS print_stmt -> prPrec i 0 (concatD [prt 0 print_stmt])

  prtList es = case es of
   [] -> (concatD [])
   x:xs -> (concatD [prt 0 x , prt 0 xs])

instance Print Compound_stm where
  prt i e = case e of
   SCompOne decs stms -> prPrec i 0 (concatD [doc (showString "{") , prt 0 decs , prt 0 stms , doc (showString "}")])


instance Print Expression_stm where
  prt i e = case e of
   SExprOne  -> prPrec i 0 (concatD [doc (showString ";")])
   SExprTwo exp -> prPrec i 0 (concatD [prt 0 exp , doc (showString ";")])


instance Print Selection_stm where
  prt i e = case e of
   SselOne exp stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   SselTwo exp stm0 stm -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm0 , doc (showString "else") , prt 0 stm])


instance Print Iter_stm where
  prt i e = case e of
   SiterOne exp stm -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 exp , doc (showString ")") , prt 0 stm])
   SiterTwo exp0 exp stm -> prPrec i 0 (concatD [doc (showString "for") , doc (showString "(") , prt 2 exp0 , doc (showString "to") , prt 11 exp , doc (showString ")") , prt 0 stm])


instance Print Print_stmt where
  prt i e = case e of
   SPrintOne exp -> prPrec i 0 (concatD [doc (showString "puts") , prt 0 exp , doc (showString ";")])


instance Print Exp where
  prt i e = case e of
   Ecomma exp0 exp -> prPrec i 0 (concatD [prt 0 exp0 , doc (showString ",") , prt 2 exp])
   Eassign exp0 assignment_op exp -> prPrec i 2 (concatD [prt 9 exp0 , prt 0 assignment_op , prt 2 exp])
   Elor exp0 exp -> prPrec i 3 (concatD [prt 4 exp0 , doc (showString "||") , prt 4 exp])
   Eland exp0 exp -> prPrec i 4 (concatD [prt 4 exp0 , doc (showString "&&") , prt 5 exp])
   Eeq exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "==") , prt 6 exp])
   Eneq exp0 exp -> prPrec i 5 (concatD [prt 5 exp0 , doc (showString "!=") , prt 6 exp])
   Elthen exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "<") , prt 7 exp])
   Egrthen exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString ">") , prt 7 exp])
   Ele exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString "<=") , prt 7 exp])
   Ege exp0 exp -> prPrec i 6 (concatD [prt 6 exp0 , doc (showString ">=") , prt 7 exp])
   Eplus exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString "+") , prt 8 exp])
   Eminus exp0 exp -> prPrec i 7 (concatD [prt 7 exp0 , doc (showString "-") , prt 8 exp])
   Etimes exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "*") , prt 9 exp])
   Ediv exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "/") , prt 9 exp])
   Emod exp0 exp -> prPrec i 8 (concatD [prt 8 exp0 , doc (showString "%") , prt 9 exp])
   Epreinc exp -> prPrec i 9 (concatD [doc (showString "++") , prt 9 exp])
   Epredec exp -> prPrec i 9 (concatD [doc (showString "--") , prt 9 exp])
   Epreop unary_operator exp -> prPrec i 9 (concatD [prt 0 unary_operator , prt 8 exp])
   Earray exp0 exp -> prPrec i 10 (concatD [prt 10 exp0 , doc (showString "[") , prt 0 exp , doc (showString "]")])
   Efunk id -> prPrec i 10 (concatD [prt 0 id , doc (showString "(") , doc (showString ")")])
   Efunkpar id exps -> prPrec i 10 (concatD [prt 0 id , doc (showString "(") , prt 2 exps , doc (showString ")")])
   Epostinc exp -> prPrec i 10 (concatD [prt 10 exp , doc (showString "++")])
   Epostdec exp -> prPrec i 10 (concatD [prt 10 exp , doc (showString "--")])
   Etuple exps -> prPrec i 11 (concatD [doc (showString "(") , prt 2 exps , doc (showString ")")])
   Evar id -> prPrec i 12 (concatD [prt 0 id])
   Econst constant -> prPrec i 12 (concatD [prt 0 constant])

  prtList es = case es of
   [x] -> (concatD [prt 2 x])
   x:xs -> (concatD [prt 2 x , doc (showString ",") , prt 2 xs])

instance Print Constant where
  prt i e = case e of
   Eint n -> prPrec i 0 (concatD [prt 0 n])
   Etrue  -> prPrec i 0 (concatD [doc (showString "true")])
   Efalse  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print Unary_operator where
  prt i e = case e of
   Plus  -> prPrec i 0 (concatD [doc (showString "+")])
   Negative  -> prPrec i 0 (concatD [doc (showString "-")])
   Logicalneg  -> prPrec i 0 (concatD [doc (showString "!")])


instance Print Assignment_op where
  prt i e = case e of
   Assign  -> prPrec i 0 (concatD [doc (showString "=")])
   AssignAdd  -> prPrec i 0 (concatD [doc (showString "+=")])
   AssignSub  -> prPrec i 0 (concatD [doc (showString "-=")])
   AssignMul  -> prPrec i 0 (concatD [doc (showString "*=")])
   AssignDiv  -> prPrec i 0 (concatD [doc (showString "/=")])



