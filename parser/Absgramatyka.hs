module Absgramatyka where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Progr [External_declaration]
  deriving (Eq,Ord,Show)

data External_declaration =
   Afunc Function_def
 | Global Dec
  deriving (Eq,Ord,Show)

data Dec_base =
   DecBase Type_specifier Ident
  deriving (Eq,Ord,Show)

data Dec =
   Declaration Dec_base
  deriving (Eq,Ord,Show)

data Function_def =
   FuncDef Dec_base [Dec_base] Function_body
  deriving (Eq,Ord,Show)

data Function_body =
   FuncBody [Dec] [Function_def] [Stm] Expression_stm
  deriving (Eq,Ord,Show)

data Type_specifier =
   Tbool
 | Tint
 | Tvoid
 | Tarray Type_specifier
 | Ttuple [Type_specifier]
 | Tdict Type_specifier Type_specifier
  deriving (Eq,Ord,Show)

data Stm =
   CompS Compound_stm
 | ExprS Expression_stm
 | SelS Selection_stm
 | IterS Iter_stm
 | PrintS Print_stmt
  deriving (Eq,Ord,Show)

data Compound_stm =
   SCompOne [Dec] [Stm]
  deriving (Eq,Ord,Show)

data Expression_stm =
   SExprOne
 | SExprTwo Exp
  deriving (Eq,Ord,Show)

data Selection_stm =
   SselOne Exp Stm
 | SselTwo Exp Stm Stm
  deriving (Eq,Ord,Show)

data Iter_stm =
   SiterOne Exp Stm
 | SiterTwo Exp Exp Stm
  deriving (Eq,Ord,Show)

data Print_stmt =
   SPrintOne Exp
  deriving (Eq,Ord,Show)

data Exp =
   Ecomma Exp Exp
 | Eassign Exp Assignment_op Exp
 | Elor Exp Exp
 | Eland Exp Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elthen Exp Exp
 | Egrthen Exp Exp
 | Ele Exp Exp
 | Ege Exp Exp
 | Eplus Exp Exp
 | Eminus Exp Exp
 | Etimes Exp Exp
 | Ediv Exp Exp
 | Emod Exp Exp
 | Epreinc Exp
 | Epredec Exp
 | Epreop Unary_operator Exp
 | Earray Exp Exp
 | Efunk Ident
 | Efunkpar Ident [Exp]
 | Epostinc Exp
 | Epostdec Exp
 | Etuple [Exp]
 | Evar Ident
 | Econst Constant
  deriving (Eq,Ord,Show)

data Constant =
   Eint Integer
 | Etrue
 | Efalse
  deriving (Eq,Ord,Show)

data Unary_operator =
   Plus
 | Negative
 | Logicalneg
  deriving (Eq,Ord,Show)

data Assignment_op =
   Assign
 | AssignAdd
 | AssignSub
 | AssignMul
 | AssignDiv
  deriving (Eq,Ord,Show)

