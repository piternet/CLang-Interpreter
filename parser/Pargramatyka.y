-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Pargramatyka where
import Absgramatyka
import Lexgramatyka
import ErrM

}

%name pProgram Program
%name pStm Stm
%name pExp Exp

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '!' { PT _ (TS _ 1) }
 '!=' { PT _ (TS _ 2) }
 '%' { PT _ (TS _ 3) }
 '&&' { PT _ (TS _ 4) }
 '(' { PT _ (TS _ 5) }
 ')' { PT _ (TS _ 6) }
 '*' { PT _ (TS _ 7) }
 '*=' { PT _ (TS _ 8) }
 '+' { PT _ (TS _ 9) }
 '++' { PT _ (TS _ 10) }
 '+=' { PT _ (TS _ 11) }
 ',' { PT _ (TS _ 12) }
 '-' { PT _ (TS _ 13) }
 '--' { PT _ (TS _ 14) }
 '-=' { PT _ (TS _ 15) }
 '/' { PT _ (TS _ 16) }
 '/=' { PT _ (TS _ 17) }
 ';' { PT _ (TS _ 18) }
 '<' { PT _ (TS _ 19) }
 '<=' { PT _ (TS _ 20) }
 '=' { PT _ (TS _ 21) }
 '==' { PT _ (TS _ 22) }
 '>' { PT _ (TS _ 23) }
 '>=' { PT _ (TS _ 24) }
 '[' { PT _ (TS _ 25) }
 '[]' { PT _ (TS _ 26) }
 ']' { PT _ (TS _ 27) }
 'bool' { PT _ (TS _ 28) }
 'else' { PT _ (TS _ 29) }
 'false' { PT _ (TS _ 30) }
 'for' { PT _ (TS _ 31) }
 'function' { PT _ (TS _ 32) }
 'if' { PT _ (TS _ 33) }
 'int' { PT _ (TS _ 34) }
 'puts' { PT _ (TS _ 35) }
 'return' { PT _ (TS _ 36) }
 'to' { PT _ (TS _ 37) }
 'true' { PT _ (TS _ 38) }
 'void' { PT _ (TS _ 39) }
 'while' { PT _ (TS _ 40) }
 '{' { PT _ (TS _ 41) }
 '||' { PT _ (TS _ 42) }
 '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Program :: { Program }
Program : ListExternal_declaration { Progr $1 } 


ListExternal_declaration :: { [External_declaration] }
ListExternal_declaration : External_declaration { (:[]) $1 } 
  | External_declaration ListExternal_declaration { (:) $1 $2 }


External_declaration :: { External_declaration }
External_declaration : Function_def { Afunc $1 } 
  | Dec { Global $1 }


Dec_base :: { Dec_base }
Dec_base : Type_specifier Ident { DecBase $1 $2 } 


Dec :: { Dec }
Dec : Dec_base ';' { Declaration $1 } 


Function_def :: { Function_def }
Function_def : 'function' Dec_base '(' ListDec_base ')' Function_body { FuncDef $2 $4 $6 } 


Function_body :: { Function_body }
Function_body : '{' ListDec ListFunction_def ListStm 'return' Expression_stm '}' { FuncBody (reverse $2) (reverse $3) (reverse $4) $6 } 


ListDec :: { [Dec] }
ListDec : {- empty -} { [] } 
  | ListDec Dec { flip (:) $1 $2 }


ListDec_base :: { [Dec_base] }
ListDec_base : {- empty -} { [] } 
  | Dec_base { (:[]) $1 }
  | Dec_base ',' ListDec_base { (:) $1 $3 }


ListFunction_def :: { [Function_def] }
ListFunction_def : {- empty -} { [] } 
  | ListFunction_def Function_def { flip (:) $1 $2 }


Type_specifier :: { Type_specifier }
Type_specifier : 'bool' { Tbool } 
  | 'int' { Tint }
  | 'void' { Tvoid }
  | Type_specifier '[]' { Tarray $1 }
  | '(' ListType_specifier ')' { Ttuple $2 }
  | Type_specifier '<' Type_specifier '>' { Tdict $1 $3 }


ListType_specifier :: { [Type_specifier] }
ListType_specifier : Type_specifier { (:[]) $1 } 
  | Type_specifier ',' ListType_specifier { (:) $1 $3 }


Stm :: { Stm }
Stm : Compound_stm { CompS $1 } 
  | Expression_stm { ExprS $1 }
  | Selection_stm { SelS $1 }
  | Iter_stm { IterS $1 }
  | Print_stmt { PrintS $1 }


Compound_stm :: { Compound_stm }
Compound_stm : '{' ListDec ListStm '}' { SCompOne (reverse $2) (reverse $3) } 


Expression_stm :: { Expression_stm }
Expression_stm : ';' { SExprOne } 
  | Exp ';' { SExprTwo $1 }


Selection_stm :: { Selection_stm }
Selection_stm : 'if' '(' Exp ')' Stm { SselOne $3 $5 } 
  | 'if' '(' Exp ')' Stm 'else' Stm { SselTwo $3 $5 $7 }


Iter_stm :: { Iter_stm }
Iter_stm : 'while' '(' Exp ')' Stm { SiterOne $3 $5 } 
  | 'for' '(' Exp2 'to' Exp11 ')' Stm { SiterTwo $3 $5 $7 }


Print_stmt :: { Print_stmt }
Print_stmt : 'puts' Exp ';' { SPrintOne $2 } 


ListStm :: { [Stm] }
ListStm : {- empty -} { [] } 
  | ListStm Stm { flip (:) $1 $2 }


Exp :: { Exp }
Exp : Exp ',' Exp2 { Ecomma $1 $3 } 
  | Exp1 { $1 }


Exp2 :: { Exp }
Exp2 : Exp9 Assignment_op Exp2 { Eassign $1 $2 $3 } 
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Exp4 '||' Exp4 { Elor $1 $3 } 
  | Exp4 { $1 }


Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { Eland $1 $3 } 
  | Exp5 { $1 }


Exp5 :: { Exp }
Exp5 : Exp5 '==' Exp6 { Eeq $1 $3 } 
  | Exp5 '!=' Exp6 { Eneq $1 $3 }
  | Exp6 { $1 }


Exp6 :: { Exp }
Exp6 : Exp6 '<' Exp7 { Elthen $1 $3 } 
  | Exp6 '>' Exp7 { Egrthen $1 $3 }
  | Exp6 '<=' Exp7 { Ele $1 $3 }
  | Exp6 '>=' Exp7 { Ege $1 $3 }
  | Exp7 { $1 }


Exp7 :: { Exp }
Exp7 : Exp7 '+' Exp8 { Eplus $1 $3 } 
  | Exp7 '-' Exp8 { Eminus $1 $3 }
  | Exp8 { $1 }


Exp8 :: { Exp }
Exp8 : Exp8 '*' Exp9 { Etimes $1 $3 } 
  | Exp8 '/' Exp9 { Ediv $1 $3 }
  | Exp8 '%' Exp9 { Emod $1 $3 }
  | Exp9 { $1 }


Exp9 :: { Exp }
Exp9 : '++' Exp9 { Epreinc $2 } 
  | '--' Exp9 { Epredec $2 }
  | Unary_operator Exp8 { Epreop $1 $2 }
  | Exp10 { $1 }


Exp10 :: { Exp }
Exp10 : Exp10 '[' Exp ']' { Earray $1 $3 } 
  | Ident '(' ')' { Efunk $1 }
  | Ident '(' ListExp2 ')' { Efunkpar $1 $3 }
  | Exp10 '++' { Epostinc $1 }
  | Exp10 '--' { Epostdec $1 }
  | Exp11 { $1 }


Exp11 :: { Exp }
Exp11 : '(' ListExp2 ')' { Etuple $2 } 
  | Exp12 { $1 }


Exp12 :: { Exp }
Exp12 : Ident { Evar $1 } 
  | Constant { Econst $1 }
  | '(' Exp ')' { $2 }


Constant :: { Constant }
Constant : Integer { Eint $1 } 
  | 'true' { Etrue }
  | 'false' { Efalse }


Exp1 :: { Exp }
Exp1 : Exp2 { $1 } 


ListExp2 :: { [Exp] }
ListExp2 : Exp2 { (:[]) $1 } 
  | Exp2 ',' ListExp2 { (:) $1 $3 }


Unary_operator :: { Unary_operator }
Unary_operator : '+' { Plus } 
  | '-' { Negative }
  | '!' { Logicalneg }


Assignment_op :: { Assignment_op }
Assignment_op : '=' { Assign } 
  | '+=' { AssignAdd }
  | '-=' { AssignSub }
  | '*=' { AssignMul }
  | '/=' { AssignDiv }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

